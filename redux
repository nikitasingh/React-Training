
Redux == data
React == view

React - 3 principles
1) one immutable object
Store is an object that stores entire states of the application

2)Actions trigger changes, like click,

3) Reducers update state

Every action has type property which tells what type of action, rest of the dataa can be anything/

Reducers takes "store" object and return a new state.

when store gets updated, Reac-Redux communicate it back to react view

Data flows downwards, action flows upwards

Actions are the evnts happening the in application, plain js object containing description of the object, must have a type property/

Actio ->Action creater which creates the js object. they generally have the same name as that of action. (type)

Redux store -> created by caling createStore() at apps anetry point. ONLY one store. dispatch,subscribe,getstatee,replacereducer

Immutability- >
clarity(since only reducer can change the state),performance,amazing debugging

use babel-polyfill fro object assignment, since its not supported by babel

Object.assign(target, ..sources)

Object.assing({}, state,{role: 'admin'})


alll reducers are called when an action is called. After passng through each case on reducers a new state is returned


reducers takes old state and returns new state, can also do manipulations etc


1 store multiple recuderrs,

whenever a store is created redux calls the reucers and uses the return value as initial state, if we have multiple reducers which reducer
to call when an action is dispatched is based on action type we have in the reducers.


Two types of components ->
1) Container -> communicate with redux, subscribe to redux state, dispatch redux actions, generated by react-redux library
2) presentations -> css, styling, read data from props, invoke callbacks on props, written by us

react redux lib connects STORE to REACT

React-redux lib->

1) providers -> attach your application to store,generally used in the root file i.e like index.js
2) connect -> will help in setting what state to be passed, create container components

Connect wraps our component so its connected to redux store

connect(what data to send as props, what props to send to action to send)
connect(mapstatetoprops, mapdispatchtoprops)

root reducer calls all the reducers, we create this file, import all the reducers inside it
